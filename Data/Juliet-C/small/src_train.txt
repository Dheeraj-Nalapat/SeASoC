void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void _main(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t_or_f()){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}}else{strcpy(data, "C:\\Windows\\System32\\winsrv.dll");}{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void _main(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char data_buf[100]="";data=data_buf;{char * data=*data_ptr1;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}}{char * data=*data_ptr2;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}}
void _main(){char * data;_union_type my_union;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}my_union.a=data;{char * data=my_union.b;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}}
static void main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}void _main(){char * data;void (*func_ptr) (char *)=main_sink;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}func_ptr(data);}
static void main_sink(){char * data=_main_data;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}_main_data=data;main_sink();}
void b_main_sink(char * data);void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}b_main_sink(data);}void b_main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(char * data);void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}b_main_sink(data);}void c_main_sink(char * data);void b_main_sink(char * data){c_main_sink(data);}void c_main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(char * data);void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}b_main_sink(data);}void c_main_sink(char * data);void b_main_sink(char * data){c_main_sink(data);}void d_main_sink(char * data);void c_main_sink(char * data){d_main_sink(data);}void d_main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(char * data);void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}b_main_sink(data);}void c_main_sink(char * data);void b_main_sink(char * data){c_main_sink(data);}void d_main_sink(char * data);void c_main_sink(char * data){d_main_sink(data);}void e_main_sink(char * data);void d_main_sink(char * data){e_main_sink(data);}void e_main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
char * b_main_source(char * data);void _main(){char * data;char data_buf[100]="";data=data_buf;data=b_main_source(data);{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}char * b_main_source(char * data){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}return data;}
void b_main_sink(char * * data_ptr);void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}b_main_sink(&data);}void b_main_sink(char * * data_ptr){char * data=*data_ptr;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(void * void_data_ptr);void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}b_main_sink(&data);}void b_main_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(char * data_array[]);void _main(){char * data;char * data_array[5];char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}data_array[2]=data;b_main_sink(data_array);}void b_main_sink(char * data_array[]){char * data=data_array[2];{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(_struct_type my_struct);void _main(){char * data;_struct_type my_struct;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}my_struct.a=data;b_main_sink(my_struct);}void b_main_sink(_struct_type my_struct){char * data=my_struct.a;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink();void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if (environment!=NULL){strncat(data+data_len, environment, 100-data_len-1);}}_main_data=data;b_main_sink();}void b_main_sink(){char * data=_main_data;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void _main(){char * data;char data_buf[100]="";data=data_buf;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void _main(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t_or_f()){{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}}else{strcpy(data, "C:\\Windows\\System32\\winsrv.dll");}{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void _main(){char * data;char data_buf[100]="";data=data_buf;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}{char * data_copy=data;char * data=data_copy;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}}
void _main(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char data_buf[100]="";data=data_buf;{char * data=*data_ptr1;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}}{char * data=*data_ptr2;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}}
void _main(){char * data;_union_type my_union;char data_buf[100]="";data=data_buf;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}my_union.a=data;{char * data=my_union.b;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}}
void _main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}void _main(){char * data;char data_buf[100]="";data=data_buf;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}_main_sink(data);}
static char * main_source(char * data){{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}return data;}void _main(){char * data;char data_buf[100]="";data=data_buf;data=main_source(data);{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(char * data);void _main(){char * data;char data_buf[100]="";data=data_buf;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}b_main_sink(data);}void b_main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(char * data);void _main(){char * data;char data_buf[100]="";data=data_buf;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}b_main_sink(data);}void c_main_sink(char * data);void b_main_sink(char * data){c_main_sink(data);}void c_main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(char * * data_ptr);void _main(){char * data;char data_buf[100]="";data=data_buf;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}b_main_sink(&data);}void b_main_sink(char * * data_ptr){char * data=*data_ptr;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(void * void_data_ptr);void _main(){char * data;char data_buf[100]="";data=data_buf;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}b_main_sink(&data);}void b_main_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(char * data);void _main(){char * data;void (*func_ptr) (char *)=b_main_sink;char data_buf[100]="";data=data_buf;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}func_ptr(data);}void b_main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(char * data_array[]);void _main(){char * data;char * data_array[5];char data_buf[100]="";data=data_buf;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}data_array[2]=data;b_main_sink(data_array);}void b_main_sink(char * data_array[]){char * data=data_array[2];{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(_struct_type my_struct);void _main(){char * data;_struct_type my_struct;char data_buf[100]="";data=data_buf;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}my_struct.a=data;b_main_sink(my_struct);}void b_main_sink(_struct_type my_struct){char * data=my_struct.a;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink();void _main(){char * data;char data_buf[100]="";data=data_buf;{WSADATA wsa_data;int wsa_data_init=0;int recv_rv;struct sockaddr_in s_in;char *replace;SOCKET connect_socket=INVALID_SOCKET;size_t data_len=strlen(data);do{if (WSAStartup(MAKEWORD(2,2), &wsa_data)!=NO_ERROR) break;wsa_data_init=1;connect_socket=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect_socket==INVALID_SOCKET) break;memset(&s_in, 0, sizeof(s_in));s_in.sin_family=AF_INET;s_in.sin_addr.s_addr=inet_addr("127.0.0.1");s_in.sin_port=htons(TCP_PORT);if (connect(connect_socket, (struct sockaddr*)&s_in, sizeof(s_in))==SOCKET_ERROR) break;recv_rv=recv(connect_socket, (char *)data+data_len, (int)(100-data_len-1), 0);if (recv_rv==SOCKET_ERROR || recv_rv==0) break;data[recv_rv]='\0';replace=strchr(data, '\r');if (replace) *replace='\0';replace=strchr(data, '\n');if (replace) *replace='\0';}while (0);if (connect_socket!=INVALID_SOCKET) CLOSE_SOCKET(connect_socket);if (wsa_data_init) WSACleanup();}_main_data=data;b_main_sink();}void b_main_sink(){char * data=_main_data;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}{char * data_copy=data;char * data=data_copy;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}}
void _main(){char * data;_union_type my_union;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}my_union.a=data;{char * data=my_union.b;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}}
void _main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}_main_sink(data);}
static char * main_source(char * data){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}return data;}void _main(){char * data;char data_buf[100]="";data=data_buf;data=main_source(data);{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
static void main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}void _main(){char * data;void (*func_ptr) (char *)=main_sink;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}func_ptr(data);}
static void main_sink(){char * data=_main_data;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}_main_data=data;main_sink();}
void b_main_sink(char * data);void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}b_main_sink(data);}void c_main_sink(char * data);void b_main_sink(char * data){c_main_sink(data);}void c_main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(char * data);void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}b_main_sink(data);}void c_main_sink(char * data);void b_main_sink(char * data){c_main_sink(data);}void d_main_sink(char * data);void c_main_sink(char * data){d_main_sink(data);}void e_main_sink(char * data);void d_main_sink(char * data){e_main_sink(data);}void e_main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
char * b_main_source(char * data);void _main(){char * data;char data_buf[100]="";data=data_buf;data=b_main_source(data);{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}char * b_main_source(char * data){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}return data;}
void b_main_sink(char * * data_ptr);void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}b_main_sink(&data);}void b_main_sink(char * * data_ptr){char * data=*data_ptr;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(void * void_data_ptr);void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}b_main_sink(&data);}void b_main_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(char * data);void _main(){char * data;void (*func_ptr) (char *)=b_main_sink;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}func_ptr(data);}void b_main_sink(char * data){{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(char * data_array[]);void _main(){char * data;char * data_array[5];char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}data_array[2]=data;b_main_sink(data_array);}void b_main_sink(char * data_array[]){char * data=data_array[2];{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink(_struct_type my_struct);void _main(){char * data;_struct_type my_struct;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}my_struct.a=data;b_main_sink(my_struct);}void b_main_sink(_struct_type my_struct){char * data=my_struct.a;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void b_main_sink();void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len, (int)(100-data_len), stdin);data_len=strlen(data);if (data_len > 0){data[data_len-1]='\0';}}}_main_data=data;b_main_sink();}void b_main_sink(){char * data=_main_data;{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void _main(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt", "r");if (pFile!=NULL){fgets(data+data_len, (int)(100-data_len), pFile);fclose(pFile);}}}{HMODULE hModule;hModule=LoadLibraryA(data);if (hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
